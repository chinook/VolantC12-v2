/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/ui_page1_screen/UI_page1ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

UI_page1ViewBase::UI_page1ViewBase()
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setPosition(0, 0, 800, 480);
    background.setOrigin(0.0f, 0.0f);
    background.setScale(1.0f, 1.0f);
    background.setAngle(0.0f);
    backgroundPainter.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    background.setPainter(backgroundPainter);
    const touchgfx::AbstractShape::ShapePoint<float> backgroundPoints[4] = { { 0.0f, 0.0f }, { 800.0f, 0.0f }, { 800.0f, 480.0f }, { 0.0f, 480.0f } };
    background.setShape(backgroundPoints);
    add(background);

    header_page1_container.setPosition(0, 0, 800, 48);
    header_p1_box.setPosition(0, 0, 800, 48);
    header_p1_box.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    header_p1_box.setBorderColor(touchgfx::Color::getColorFromRGB(50, 82, 123));
    header_p1_box.setBorderSize(2);
    header_page1_container.add(header_p1_box);

    page1_num_text.setXY(718, 9);
    page1_num_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    page1_num_text.setLinespacing(0);
    page1_num_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6AU));
    header_page1_container.add(page1_num_text);

    add(header_page1_container);

    mast_angle_container.setPosition(0, 48, 400, 144);
    mast_angle_box.setPosition(0, 0, 400, 144);
    mast_angle_box.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    mast_angle_box.setBorderColor(touchgfx::Color::getColorFromRGB(50, 82, 123));
    mast_angle_box.setBorderSize(2);
    mast_angle_container.add(mast_angle_box);

    mast_angle_title.setXY(10, 111);
    mast_angle_title.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    mast_angle_title.setLinespacing(0);
    mast_angle_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OSUO));
    mast_angle_container.add(mast_angle_title);

    mast_angle_text.setPosition(110, 32, 185, 61);
    mast_angle_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    mast_angle_text.setLinespacing(0);
    Unicode::snprintf(mast_angle_textBuffer, MAST_ANGLE_TEXT_SIZE, "%s", touchgfx::TypedText(T_MAST_ANGLE_TEXT).getText());
    mast_angle_text.setWildcard(mast_angle_textBuffer);
    mast_angle_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2589));
    mast_angle_container.add(mast_angle_text);

    add(mast_angle_container);

    pitch_container.setPosition(400, 48, 400, 144);
    pitch_box.setPosition(0, 0, 400, 144);
    pitch_box.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    pitch_box.setBorderColor(touchgfx::Color::getColorFromRGB(50, 82, 123));
    pitch_box.setBorderSize(2);
    pitch_container.add(pitch_box);

    pitch_title.setXY(10, 111);
    pitch_title.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    pitch_title.setLinespacing(0);
    pitch_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A6ZH));
    pitch_container.add(pitch_title);

    pitch_text.setPosition(110, 32, 185, 61);
    pitch_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    pitch_text.setLinespacing(0);
    Unicode::snprintf(pitch_textBuffer, PITCH_TEXT_SIZE, "%s", touchgfx::TypedText(T_PITCH_TEXT).getText());
    pitch_text.setWildcard(pitch_textBuffer);
    pitch_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KMLK));
    pitch_container.add(pitch_text);

    add(pitch_container);

    wind_speed_container.setPosition(0, 192, 400, 144);
    wind_speed_box.setPosition(0, 0, 400, 144);
    wind_speed_box.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    wind_speed_box.setBorderColor(touchgfx::Color::getColorFromRGB(50, 82, 123));
    wind_speed_box.setBorderSize(2);
    wind_speed_container.add(wind_speed_box);

    wind_speed_title.setXY(11, 108);
    wind_speed_title.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    wind_speed_title.setLinespacing(0);
    wind_speed_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PRUK));
    wind_speed_container.add(wind_speed_title);

    wind_speed_text.setPosition(110, 32, 185, 61);
    wind_speed_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    wind_speed_text.setLinespacing(0);
    Unicode::snprintf(wind_speed_textBuffer, WIND_SPEED_TEXT_SIZE, "%s", touchgfx::TypedText(T_WIND_SPEED_TEXT).getText());
    wind_speed_text.setWildcard(wind_speed_textBuffer);
    wind_speed_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P7XC));
    wind_speed_container.add(wind_speed_text);

    add(wind_speed_container);

    wind_dir_container.setPosition(400, 192, 400, 144);
    wind_dir_box.setPosition(0, 0, 400, 144);
    wind_dir_box.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    wind_dir_box.setBorderColor(touchgfx::Color::getColorFromRGB(50, 82, 123));
    wind_dir_box.setBorderSize(2);
    wind_dir_container.add(wind_dir_box);

    wind_dir_title.setXY(10, 108);
    wind_dir_title.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    wind_dir_title.setLinespacing(0);
    wind_dir_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OVCS));
    wind_dir_container.add(wind_dir_title);

    wind_dir_text.setPosition(110, 32, 185, 61);
    wind_dir_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    wind_dir_text.setLinespacing(0);
    Unicode::snprintf(wind_dir_textBuffer, WIND_DIR_TEXT_SIZE, "%s", touchgfx::TypedText(T_WIND_DIR_TEXT).getText());
    wind_dir_text.setWildcard(wind_dir_textBuffer);
    wind_dir_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_APA4));
    wind_dir_container.add(wind_dir_text);

    add(wind_dir_container);

    wheel_rpm_container.setPosition(0, 336, 400, 144);
    wheel_rpm_box.setPosition(0, 0, 400, 144);
    wheel_rpm_box.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    wheel_rpm_box.setBorderColor(touchgfx::Color::getColorFromRGB(50, 82, 123));
    wheel_rpm_box.setBorderSize(2);
    wheel_rpm_container.add(wheel_rpm_box);

    wheel_rpm_title.setXY(10, 108);
    wheel_rpm_title.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    wheel_rpm_title.setLinespacing(0);
    wheel_rpm_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HW5F));
    wheel_rpm_container.add(wheel_rpm_title);

    wheel_rpm_text.setPosition(110, 32, 185, 61);
    wheel_rpm_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    wheel_rpm_text.setLinespacing(0);
    Unicode::snprintf(wheel_rpm_textBuffer, WHEEL_RPM_TEXT_SIZE, "%s", touchgfx::TypedText(T_WHEEL_RPM_TEXT).getText());
    wheel_rpm_text.setWildcard(wheel_rpm_textBuffer);
    wheel_rpm_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8FJJ));
    wheel_rpm_container.add(wheel_rpm_text);

    add(wheel_rpm_container);

    turb_rpm_container.setPosition(400, 336, 400, 144);
    turb_rpm_box.setPosition(0, 0, 400, 144);
    turb_rpm_box.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    turb_rpm_box.setBorderColor(touchgfx::Color::getColorFromRGB(50, 82, 123));
    turb_rpm_box.setBorderSize(2);
    turb_rpm_container.add(turb_rpm_box);

    turb_rpm_title.setXY(10, 108);
    turb_rpm_title.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    turb_rpm_title.setLinespacing(0);
    turb_rpm_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RSWZ));
    turb_rpm_container.add(turb_rpm_title);

    turb_rpm_text.setPosition(110, 32, 185, 61);
    turb_rpm_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    turb_rpm_text.setLinespacing(0);
    Unicode::snprintf(turb_rpm_textBuffer, TURB_RPM_TEXT_SIZE, "%s", touchgfx::TypedText(T_TURB_RPM_TEXT).getText());
    turb_rpm_text.setWildcard(turb_rpm_textBuffer);
    turb_rpm_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YY7I));
    turb_rpm_container.add(turb_rpm_text);

    add(turb_rpm_container);
}

UI_page1ViewBase::~UI_page1ViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void UI_page1ViewBase::setupScreen()
{

}

void UI_page1ViewBase::handleKeyEvent(uint8_t key)
{
    if(1 == key)
    {
        //show_ui_page2
        //When hardware button 1 clicked change screen to UI_page2
        //Go to UI_page2 with no screen transition
        application().gotoUI_page2ScreenNoTransition();
    
    }
}
